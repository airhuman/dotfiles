set nocompatible
syntax on

call plug#begin('~/.vim/plugged')

Plug 'fatih/vim-go'

Plug 'Shougo/neco-vim'
Plug 'neoclide/coc-neco'
Plug 'neoclide/jsonc.vim'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'jackguo380/vim-lsp-cxx-highlight'
Plug 'majutsushi/tagbar'

Plug 'honza/vim-snippets'

Plug 'pangloss/vim-javascript'
Plug 'HerringtonDarkholme/yats.vim'

Plug 'liuchengxu/vista.vim'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'stsewd/fzf-checkout.vim'
Plug 'airblade/vim-rooter'

Plug 'gruvbox-community/gruvbox'
Plug 'jremmen/vim-ripgrep'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-rhubarb'
Plug 'mhinz/vim-signify'
Plug 'junegunn/gv.vim'
Plug 'vim-scripts/tComment'
Plug 'itchyny/lightline.vim'
Plug 'easymotion/vim-easymotion'
Plug 'haya14busa/incsearch.vim'
Plug 'mbbill/undotree'
Plug 'preservim/nerdtree'

Plug 'iamcco/markdown-preview.nvim', { 'do': 'cd app & yarn install'  }
Plug 'jiangmiao/auto-pairs'

Plug 'sbdchd/neoformat'

Plug 'moll/vim-bbye'
Plug 'terryma/vim-multiple-cursors'

Plug 'tpope/vim-surround'
" Language packs
Plug 'sheerun/vim-polyglot'
call plug#end()

" general {{{
syntax enable

let mapleader = ","
let g:mapleader = ","
let maplocalleader = ","
let g:maplocalleader = ","
nmap <silent> <leader>ev :e $MYVIMRC<CR>
nmap <silent> <leader>sv :so $MYVIMRC<CR>
nnoremap <silent> <leader> :WhichKey '<Space>'<CR>

augroup line_return
  au!
  au BufReadPost *
    \ if line("'\"") > 0 && line("'\"") <= line("$") |
    \   execute 'normal! g`"zvzz' |
    \ endif
augroup END
" general }}}


" setting {{{
set hidden
set wildmenu
set nobackup
set nowritebackup
set noerrorbells
set tabstop=4 softtabstop=4
set shiftwidth=4
set expandtab
set smartindent
set number relativenumber
set smartcase
set incsearch
set cmdheight=2
set updatetime=50
set shortmess+=c
set signcolumn=yes
set backspace=indent,eol,start
set laststatus=2
set clipboard+=unnamed
set noerrorbells
set nowrap
set noswapfile
set nobackup
set undodir=~/.vim/undodir
" set splitbelow
set splitright
" setting }}}

" mapping {{{
nmap <silent> <leader>ev :e $MYVIMRC<CR>
nmap <silent> <leader>sv :so $MYVIMRC<CR>

nnoremap Q :q<cr>
nnoremap <leader>Q :qa!<cr>
" Act like D and C
nnoremap Y y$
" Keep search matches in the middle of the window.
nnoremap n nzzzv
nnoremap N Nzzzv
" easy move around windows
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-l> <c-w>l
nnoremap <c-h> <c-w>h
" ctrl_e ctrl_y 3 lines
nnoremap <c-e> 3<c-e>
nnoremap <c-y> 3<c-y>
vnoremap <c-e> 3<c-e>
vnoremap <c-y> 3<c-y>

inoremap <C-e> <C-o>$
inoremap <C-a> <C-o>0

nnoremap <Leader>+ :vertical resize +5<CR>
nnoremap <Leader>- :vertical resize -5<CR>

noremap <Leader>pu :<c-u>PlugUpdate<CR>
inoremap jk <esc>
" mapping }}}

highlight ColorColumn ctermbg=0 guibg=lightgrey


augroup line_return
  au!
  au bufreadpost *
    \ if line("'\"") > 0 && line("'\"") <= line("$") |
    \   execute 'normal! g`"zvzz' |
    \ endif
augroup end


let g:gruvbox_contrast_dark = 'hard'
if exists('+termguicolors')
    let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
    let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
endif
let g:gruvbox_invert_selection='0'

colorscheme gruvbox
set background=dark

if executable('rg')
    let g:rg_derive_root='true'
endif

" 常用的 coc 插件
let g:coc_global_extensions = [
    \ 'coc-tag',
    \ 'coc-lists',
    \ 'coc-tsserver',
    \ 'coc-marketplace',
    \ 'coc-snippets',
    \ 'coc-yank',
    \ 'coc-json',
    \ 'coc-yaml',
    \ 'coc-prettier',
    \ 'coc-highlight',
    \ 'coc-html',
    \ 'coc-go',
    \ 'coc-clangd',
    \ 'coc-cmake',
    \ 'coc-deno',
    \ 'coc-explorer',
    \ ]

function! CocCurrentFunction()
    return get(b:, 'coc_current_function', '')
endfunction

let g:lightline = {
  \ 'colorscheme': 'wombat',
  \ 'active': {
  \   'left': [ [ 'mode', 'paste' ],
  \             [ 'cocstatus', 'gitbranch', 'currentfunction', 'readonly', 'filename', 'modified' ] ]
  \ },
  \ 'component_function': {
  \   'cocstatus': 'coc#status',
  \   'currentfunction': 'CocCurrentFunction',
  \   'gitbranch': 'FugitiveHead',
  \ },
  \ }
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}
autocmd User CocStatusChange,CocDiagnosticChange call lightline#update()

function! s:check_back_space() abort
    let col = col('.') - 1
    return !col || getline('.')[col - 1]  =~# '\s'
endfunction

inoremap <silent><expr> <Tab>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"
inoremap <silent><expr> <C-space> coc#refresh()

let g:coc_snippet_next = '<c-j>'
let g:coc_snippet_prev = '<c-k>'
" 其实用 <C-l> 触发代码片段展开挺好的，使用<TAB>会有next or expand的冲突
imap <C-l> <Plug>(coc-snippets-expand)

nnoremap <leader>cr :CocRestart
nmap <leader>d <Plug>(coc-definition)
nmap <leader>y <Plug>(coc-type-definition)
nmap <space>i <Plug>(coc-implementation)
nmap <space>r <Plug>(coc-references)
nmap <leader>rn <Plug>(coc-rename)
nmap <space>e :CocCommand explorer<CR>
nmap <space>f :<c-u>Files<cr>
" nmap <space>f :<c-u>CocList files<cr>
nnoremap <silent> <space>p :<C-u>CocListResume<CR>
nnoremap <silent> <space>j :<C-u>CocNext<CR>
nnoremap <silent> <space>k :<C-u>CocPrev<CR>
nnoremap <silent> <space>s :<C-u>CocList -I symbols<cr>
" nnoremap <silent> <space>o :<c-u>CocList outline<cr>
nnoremap <silent> <space>o :<c-u>Vista finder coc<cr>
nnoremap <silent> <space>b :<c-u>CocList buffers<cr>
nnoremap <silent> <space>a :<C-u>CocList diagnostics<cr>
nnoremap <silent> <space>c :<C-u>CocList commands<cr>
nnoremap <silent> <space>y :<C-u>CocList -A --normal yank<cr>
nnoremap <silent> <space>l :<C-u>CocList grep<cr>
nnoremap <silent> <space>w :<C-U>CocList windows<CR>
nnoremap <C-p> :GFiles<CR>
" close quickfix
noremap <silent> <space>c :<C-U>cclose<CR>
command! -nargs=0 Prettier :CocCommand prettier.formatFile
autocmd CursorHold * silent call CocActionAsync('highlight')
autocmd BufRead,BufNewFile tsconfig.json set filetype=jsonc
autocmd BufWritePre *.go :call CocAction('runCommand', 'editor.action.organizeImport')

let g:vista_sidebar_position = "vertical topleft"
let g:vista_sidebar_width = 35

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocAction('format')

fun! TrimWhitespace()
    let l:save = winsaveview()
    keeppatterns %s/\s\+$//e
    call winrestview(l:save)
endfun

autocmd BufWritePre * :call TrimWhitespace()

augroup my
  autocmd!
  autocmd FileType typescript setlocal ts=2 sts=2 sw=2 noexpandtab
  autocmd FileType typescript,javascript,css,json imap <silent> <leader>cf <esc>:<c-u>Format<cr>
  autocmd FileType typescript,javascript,css,json nmap <silent> <leader>cf :<c-u>Format<cr>
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup END

augroup fmt
  autocmd!
  autocmd FileType cc,cpp setlocal ts=2 sts=2 sw=2 et
  autocmd FileType cc,cpp noremap <buffer><Leader>cf <c-c>:Neoformat<CR><CR>gi
  autocmd FileType cc,cpp inoremap <buffer><Leader>cf <c-c>:Neoformat<CR><CR>gi
  autocmd BufWritePre *.cc,*.cpp undojoin | Neoformat
augroup END

" nerdtree {{{
map <leader><tab> :<c-u>NERDTreeToggle<CR>
autocmd BufEnter * if bufname('#') =~# "^NERD_tree_" && winnr('$') > 1 | b# | endif
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
" nerdtree}}}

" easymotion {{{
let g:EasyMotion_smartcase = 1
let g:incsearch#magic = '\v'
nmap s <Plug>(easymotion-overwin-f)
nmap t <Plug>(easymotion-t2)
map  <Leader>w <Plug>(easymotion-bd-w)
nmap <Leader>w <Plug>(easymotion-overwin-w)
map  <Leader>f <Plug>(easymotion-bd-f)
nmap <Leader>f <Plug>(easymotion-overwin-f)
" easymotion }}}

" vim-go {{{
" disable vim-go :GoDef short cut (gd)
" this is handled by LanguageClient [LC]
let g:go_def_mapping_enabled = 0
let g:go_code_completion_enabled = 0
let g:go_gopls_enabled = 1
let g:go_test_prepend_name = 1
let g:go_fmt_fail_silently = 1
let g:go_fmt_command = "goimports"
let g:go_def_mode = "gopls"
let g:go_list_type = "quickfix"
let g:go_auto_type_info = 1
let g:go_fmt_autosave = 1
let g:go_auto_sameids = 0
let g:go_doc_popup_window = 1
let g:go_null_module_warning = 0
let g:go_echo_command_info = 1
let g:go_autodetect_gopath = 1
let g:go_metalinter_autosave_enabled = ['vet', 'golint']
let g:go_metalinter_enabled = ['vet', 'golint']
let g:go_highlight_space_tab_error = 0
let g:go_highlight_array_whitespace_error = 0
let g:go_highlight_trailing_whitespace_error = 0
let g:go_highlight_extra_types = 0
let g:go_highlight_build_constraints = 1
let g:go_highlight_types = 0
let g:go_highlight_operators = 1
let g:go_highlight_format_strings = 0
let g:go_highlight_function_calls = 0
let g:go_gocode_propose_source = 1
let g:go_addtags_transform = 'camelcase'
let g:go_fold_enable = []

function! s:build_go_files()
  let l:file = expand('%')
  if l:file =~# '^\f\+_test\.go$'
    call go#test#Test(0, 1)
  elseif l:file =~# '^\f\+\.go$'
    call go#cmd#Build(0)
  endif
endfunction

augroup go
  autocmd!
  autocmd FileType go nmap <silent> <Leader>V <Plug>(go-def-vertical)
  autocmd FileType go nmap <silent> <Leader>S <Plug>(go-def-split)
  autocmd FileType go nmap <C-g> :GoDecls<cr>
  autocmd FileType go imap <C-g> <esc>:<C-u>GoDecls<cr>
  autocmd FileType go nmap <space>g :GoDeclsDir<cr>
  autocmd FileType go nmap <space>o :<C-U>GoDecls<CR>

  autocmd FileType go nmap <space>n :<C-U>cnext<CR>
  autocmd FileType go nmap <space>p :<C-U>cprevious<CR>

  autocmd Filetype go command! -bang A call go#alternate#Switch(<bang>0, 'edit')
  autocmd Filetype go command! -bang AV call go#alternate#Switch(<bang>0, 'vsplit')
  autocmd Filetype go command! -bang AS call go#alternate#Switch(<bang>0, 'split')
  autocmd Filetype go command! -bang AT call go#alternate#Switch(<bang>0, 'tabe')

  autocmd FileType go noremap <buffer><Leader>cf :GoFmt<CR><CR>
  autocmd FileType go inoremap <buffer><Leader>cf <c-c>:GoFmt<CR><CR>gi
  autocmd FileType go setlocal ts=4 sts=4 sw=4 noexpandtab
  autocmd FileType go setlocal completeopt-=preview
augroup END

" vim-go }}}

" fzf {{{
noremap <silent> <F1> :<C-U>Helptags<CR>
let g:fzf_layout = { 'window': { 'width': 0.8, 'height': 0.8 } }
let g:fzf_action = {
  \ 'ctrl-x': 'split',
  \ 'ctrl-]': 'vsplit' }
" fzf }}}

" markdown {{{
let g:vim_markdown_math = 1
nmap <leader>md :MarkdownPreview<CR>
" markdown }}}
" tagbar {{{
nnoremap <silent> <leader>2 :TagbarToggle<CR>
let tags = "./tags"
"tagbar }}}

" Sweet Sweet FuGITive
nmap <leader>gh :diffget //3<CR>
nmap <leader>gu :diffget //2<CR>
nmap <leader>gs :G<CR>

" autopairs {{{
let g:AutoPairsFlyMode = 1
let g:AutoPairsShortcutToggle = '<F4>'
" autopairs }}}

" vim-bbye {{{
noremap <space><BS> :Bdelete<cr>
" vim-bbye }}}
" vim-multiple-cursors {{{
let g:multi_cursor_exit_from_insert_mode = 0
let g:multi_cursor_exit_from_visual_mode = 0

function! Multiple_cursors_before()
endfunction

function! Multiple_cursors_after()
endfunction
" vim-multiple-cursors }}}

" fugitive {{{
nmap <leader>gh :diffget //3<CR>
nmap <leader>gf :diffget //2<CR>
nmap <leader>gs :G<CR>
nnoremap <leader>gc :GBranches<CR>
let g:fzf_branch_actions = {
\ 'checkout': {
\   'prompt': 'Checkout> ',
\   'execute': 'echo system("{git} checkout {branch}")',
\   'multiple': v:false,
\   'keymap': 'enter',
\   'required': ['branch'],
\   'confirm': v:false,
\ },
\ 'track': {
\   'prompt': 'Track> ',
\   'execute': 'echo system("{git} checkout --track {branch}")',
\   'multiple': v:false,
\   'keymap': 'ctrl-t',
\   'required': ['branch'],
\   'confirm': v:false,
\ },
\ 'create': {
\   'prompt': 'Create> ',
\   'execute': 'echo system("{git} checkout -b {input}")',
\   'multiple': v:false,
\   'keymap': 'ctrl-n',
\   'required': ['input'],
\   'confirm': v:false,
\ },
\ 'delete': {
\   'prompt': 'Delete> ',
\   'execute': 'echo system("{git} branch -D {branch}")',
\   'multiple': v:true,
\   'keymap': 'ctrl-d',
\   'required': ['branch'],
\   'confirm': v:true,
\ },
\ 'merge':{
\   'prompt': 'Merge> ',
\   'execute': 'echo system("{git} merge {branch}")',
\   'multiple': v:false,
\   'keymap': 'ctrl-e',
\   'required': ['branch'],
\   'confirm': v:true,
\ },
\}

let g:fzf_tag_actions = {
\ 'checkout': {
\   'prompt': 'Checkout> ',
\   'execute': 'echo system("{git} checkout {tag}")',
\   'multiple': v:false,
\   'keymap': 'enter',
\   'required': ['tag'],
\   'confirm': v:false,
\ },
\ 'create': {
\   'prompt': 'Create> ',
\   'execute': 'echo system("{git} tag {input}")',
\   'multiple': v:false,
\   'keymap': 'ctrl-n',
\   'required': ['input'],
\   'confirm': v:false,
\ },
\ 'delete': {
\   'prompt': 'Delete> ',
\   'execute': 'echo system("{git} branch -D {tag}")',
\   'multiple': v:true,
\   'keymap': 'ctrl-d',
\   'required': ['tag'],
\   'confirm': v:true,
\ },
\}
" fugitive }}}
