
" Plug 'davidhalter/jedi-vim'
" Use YCM
" Disable jedi completions
" let g:jedi#completions_enabled = 0
" let g:jedi#show_call_signatures_delay = 200
=======
" Plug 'maksimr/vim-jsbeautify'
=======
" Plug 'einars/js-beautify'
=======
" Plug 'benmills/vimux'
" 'benmills/vimux' mappings
" Run the current file with rspec
" map <Leader>rb :call VimuxRunCommand("clear; rspec " . bufname("%"))<CR>
" Prompt for a command to run
" map <Leader>vp :VimuxPromptCommand<CR>
" Run last command executed by VimuxRunCommand
" map <Leader>vl :VimuxRunLastCommand<CR>
" Inspect runner pane
" map <Leader>vi :VimuxInspectRunner<CR>
" Close vim tmux runner opened by VimuxRunCommand
" map <Leader>vq :VimuxCloseRunner<CR>
" Interrupt any command running in the runner pane
" map <Leader>vx :VimuxInterruptRunner<CR>
" Zoom the runner pane (use <bind-key> z to restore runner pane)
" map <Leader>vz :call VimuxZoomRunner()<CR>
=======
" Plug 'vim-scripts/DrawIt'
=======
" Plug 'xolox/vim-misc'
" Plug 'xolox/vim-session'
" let g:session_directory = '~/.config/nvim/.sessions'
" let g:session_autoload = 'no'
" let g:session_autosave = 'no'
" nnoremap <leader>so :OpenSession
" nnoremap <leader>ss :SaveSession
" nnoremap <leader>sd :DeleteSession<cr>
" nnoremap <leader>sc :CloseSession<cr>
=======
" 启动 vim，显示 MRU
" Plug 'mhinz/vim-startify'
=======
" js
" Plug 'pangloss/vim-javascript'

" improve js edit
" Plug 'mattn/emmet-vim'

" js auto-completion
" Plug 'ternjs/tern_for_vim', { 'do' : 'npm install' }
" let g:tern_show_argument_hints='on_hold'
" let g:tern_map_keys=1
" <Leader> td :TernDoc  Documentation under cursor
" <Leader> tb :TernDocBrowse  Browse documentation
" <Leader> tt :TernType Type hints
" <Leader> td :TernDef  Jump to definition (yes, 'td' is duplicated)
" <Leader> tpd  :TernDefPreview Jump to definition inside preview
" <Leader> tsd  :TernDefSplit Definition in new split
" <Leader> ttd  :TernDefTab Definition in new tab
" <Leader> tr :TernRefs All references under cursor
" <Leader> tR :TernRename Rename variable
=======
" 显示最近的闭合标签
"Plug 'Valloric/MatchTagAlways'
======
YCM
" let g:ycm_python_binary_path = 'python'
" let g:ycm_global_ycm_extra_conf = '~/.config/nvim/etc/ycm_extra_conf.py'
" let g:ycm_collect_identifiers_from_tag_files = 1
" let g:ycm_confirm_extra_conf = 1
" let g:ycm_enable_diagnostic_signs = 0
" let g:ycm_enable_diagnostic_highlighting = 0
" let g:ycm_autoclose_preview_window_after_completion = 0
" let g:ycm_autoclose_preview_window_after_insertion = 1
" let g:ycm_collect_identifiers_from_comments_and_strings = 1
" nnoremap <leader>jd :YcmCompleter GoToDefinitionElseDeclaration<CR>
" nnoremap <silent> <Leader>d :YcmCompleter GoToDefinition<cr>
" nnoremap <silent> <Leader>g :YcmCompleter GoToDeclaration<cr>
" noremap <leader>Y :call YcmAutoTriggerToggle()<cr>
" function! YcmAutoTriggerToggle()
"   let cur = g:ycm_auto_trigger
"   if cur == 0
"     let g:ycm_auto_trigger = 1
"   else
"     let g:ycm_auto_trigger = 0
"   endif
" endfunction
" let g:ycm_server_keep_logfiles = 1
" let g:ycm_server_log_level = 'debug'
" Plug 'Valloric/YouCompleteMe', { 'do': function('BuildYCM') }

function! BuildYCM(info)
  " info is a dictionary with 3 fields
  " - name:   name of the plugin
  " - status: 'installed', 'updated', or 'unchanged'
  " - force:  set on PlugInstall! or PlugUpdate!
  if a:info.status == 'installed' || a:info.force
    !./install.py --clang-completer
    " !./install.py --clang-completer --tern-completer
  endif
endfunction


====Denite
Plug 'Shougo/denite.nvim', { 'do': ':UpdateRemotePlugins' }


" denite {{{
try
  call denite#custom#var('file/rec', 'command', ['rg', '--files', '--glob', '!.git'])
  call denite#custom#var('grep', 'command', ['rg'])
  " Custom options for ripgrep
  "   --vimgrep:  Show results with every match on it's own line
  "   --hidden:   Search hidden directories and files
  "   --heading:  Show the file name above clusters of matches from each file
  "   --S:        Search case insensitively if the pattern is all lowercase
  call denite#custom#var('grep', 'default_opts', ['--hidden', '--vimgrep', '--heading', '-S'])
  " Recommended defaults for ripgrep via Denite docs
  call denite#custom#var('grep', 'recursive_opts', [])
  call denite#custom#var('grep', 'pattern_opt', ['--regexp'])
  call denite#custom#var('grep', 'separator', ['--'])
  call denite#custom#var('grep', 'final_opts', [])
  call denite#custom#var('buffer', 'date_format', '')
  let s:denite_options = {'default' : {
  \ 'split': 'floating',
  \ 'start_filter': 1,
  \ 'auto_resize': 0,
  \ 'prompt': '> ',
  \ 'statusline': 0,
  \ 'highlight_matched_char': 'Visual',
  \ 'highlight_matched_range': 'Visual',
  \ 'highlight_window_background': 'NormalFloat',
  \ 'highlight_filter_background': 'DiffAdd',
  \ 'winrow': 1,
  \ 'vertical_preview': 1
  \ }}
  " Loop through denite options and enable them
  function! s:profile(opts) abort
    for l:fname in keys(a:opts)
      for l:dopt in keys(a:opts[l:fname])
        call denite#custom#option(l:fname, l:dopt, a:opts[l:fname][l:dopt])
      endfor
    endfor
  endfunction
  call s:profile(s:denite_options)
catch
  echo 'Denite not installed. It should work after running :PlugInstall'
endtry
" Define mappings while in 'filter' mode
"   <C-o>         - Switch to normal mode inside of search results
"   <Esc>         - Exit denite window in any mode
"   <CR>          - Open currently selected file in any mode
"   <C-t>         - Open currently selected file in a new tab
"   <C-v>         - Open currently selected file a vertical split
"   <C-h>         - Open currently selected file in a horizontal split
autocmd FileType denite-filter call s:denite_filter_my_settings()
function! s:denite_filter_my_settings() abort
  imap <silent><buffer> <C-o>
  \ <Plug>(denite_filter_quit)
  inoremap <silent><buffer><expr> <Esc>
  \ denite#do_map('quit')
  nnoremap <silent><buffer><expr> <Esc>
  \ denite#do_map('quit')
  inoremap <silent><buffer><expr> <CR>
  \ denite#do_map('do_action')
  inoremap <silent><buffer><expr> <C-t>
  \ denite#do_map('do_action', 'tabopen')
  inoremap <silent><buffer><expr> <C-v>
  \ denite#do_map('do_action', 'vsplit')
  inoremap <silent><buffer><expr> <C-h>
  \ denite#do_map('do_action', 'split')
endfunction

" Define mappings while in denite window
"   <CR>        - Opens currently selected file
"   q or <Esc>  - Quit Denite window
"   d           - Delete currenly selected file
"   p           - Preview currently selected file
"   <C-o> or i  - Switch to insert mode inside of filter prompt
"   <C-t>       - Open currently selected file in a new tab
"   <C-v>       - Open currently selected file a vertical split
"   <C-h>       - Open currently selected file in a horizontal split
autocmd FileType denite call s:denite_my_settings()
function! s:denite_my_settings() abort
  nnoremap <silent><buffer><expr> <CR>
  \ denite#do_map('do_action')
  nnoremap <silent><buffer><expr> q
  \ denite#do_map('quit')
  nnoremap <silent><buffer><expr> <Esc>
  \ denite#do_map('quit')
  nnoremap <silent><buffer><expr> d
  \ denite#do_map('do_action', 'delete')
  nnoremap <silent><buffer><expr> p
  \ denite#do_map('do_action', 'preview')
  nnoremap <silent><buffer><expr> i
  \ denite#do_map('open_filter_buffer')
  nnoremap <silent><buffer><expr> <C-o>
  \ denite#do_map('open_filter_buffer')
  nnoremap <silent><buffer><expr> <C-t>
  \ denite#do_map('do_action', 'tabopen')
  nnoremap <silent><buffer><expr> <C-v>
  \ denite#do_map('do_action', 'vsplit')
  nnoremap <silent><buffer><expr> <C-h>
  \ denite#do_map('do_action', 'split')
endfunction

" FIND and GREP COMMANDS
if executable('rg')
  " Ripgrep
  call denite#custom#var('file/rec', 'command', ['rg', '--files', '--glob', '!.git'])
  call denite#custom#var('grep', 'command', ['rg', '--threads', '1'])
  call denite#custom#var('grep', 'recursive_opts', [])
  call denite#custom#var('grep', 'final_opts', [])
  call denite#custom#var('grep', 'separator', ['--'])
  call denite#custom#var('grep', 'default_opts', ['-i', '--vimgrep', '--no-heading'])
endif

" IMPORTANT Denite MAPPINGS

if has('nvim')
  nnoremap <space>o :<C-u>Denite -split=floating outline -winrow=10<cr>
else
  nnoremap <space>o :<C-u>Denite -split=no outline -winrow=10<cr>
endif

" denite }}}


